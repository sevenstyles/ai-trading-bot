//@version=5
indicator(title="Outside Bar Mitigation Indicator", shorttitle="OBMI", overlay=true)

// Pattern detection
bool outsideBar = high > high[1] and low < low[1]
bool secondCandleBullish = close > open

// User-configurable settings
maxLines = input.int(10, title="Max Historical Lines", minval=1)
boxColorBullish = input.color(color.green, title="Bullish Box Color")
boxColorBearish = input.color(color.red, title="Bearish Box Color")
boxTransparency = input.int(90, title="Box Transparency", minval=0, maxval=100)
//colorCandles = input.bool(false, title="Color Outside Bar Candles") // Removed candle coloring

// Line drawing
var box[] obLines = array.new_box()
var float[] slLevels = array.new_float()
var bool[] tradeEntered = array.new_bool()

if outsideBar and not outsideBar[1]
    if array.size(obLines) >= maxLines
        box.delete(array.shift(obLines))
        array.shift(slLevels)
        array.shift(tradeEntered)

    array.push(obLines, box.new(bar_index, secondCandleBullish ? high : low, bar_index + 500, secondCandleBullish ? low : high, bgcolor = secondCandleBullish ? color.new(boxColorBullish, boxTransparency) : color.new(boxColorBearish, boxTransparency)))
    array.push(tradeEntered, false)

    //barcolor(colorCandles ? (secondCandleBullish ? color.green : color.red) : na) // Removed candle coloring

// Strategy Logic
if array.size(obLines) > 0
    for i = 0 to array.size(obLines) - 1
        box_ = array.get(obLines, i)
        sl = array.get(slLevels, i)
        boxY = box.get_top(box_)
        bool hasEntered = array.get(tradeEntered, i)

        box.set_right(box_, bar_index + 500)

// Mitigation (optional - can be used for visual confirmation)
// for l in obLines
//     if secondCandleBullish
//        if close > line.get_y1(l)
//            line.set_color(l, color.gray)
//    else
//        if close < line.get_y1(l)
//            line.set_color(l, color.gray)