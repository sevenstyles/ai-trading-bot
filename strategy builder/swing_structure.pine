//@version=6
indicator("Swing Structure", overlay=true, max_labels_count=500, max_lines_count=500)

// Constants
var BULLISH = 1
var BEARISH = -1

// Input parameters
lookbackLeft = input(50, "Lookback Left (Major Swings)")
lookbackRight = input(50, "Lookback Right (Major Swings)")
minorLookbackLeft = input(10, "Lookback Left (Minor Swings)")
minorLookbackRight = input(10, "Lookback Right (Minor Swings)")
labelOffset = input.float(2.0, "Text Offset", minval=0.1)
swingThreshold = input.float(1.0, "Swing Threshold %", minval=0.1, step=0.1) / 100
atrPeriod = input(14, "ATR Period")
atrMultiplier = input.float(1.5, "ATR Multiplier for Swing Significance", minval=0.5, step=0.1)
textSize = input.string("Small", "Text Size", options=["Tiny", "Small", "Normal", "Large"])

// Convert text size input to label size
textSizeValue = switch
    textSize == "Tiny"   => size.tiny
    textSize == "Small"  => size.small
    textSize == "Normal" => size.normal
    => size.large

// Variables to store previous swing levels and market structure
var float prevSwingHigh = na
var float prevSwingLow = na
var float lastSwingHigh = na
var float lastSwingLow = na
var bool inDowntrend = false
var bool inUptrend = false
var int lastSwingHighBar = na
var int lastSwingLowBar = na
var int trendBias = 0

// Arrays to store all our visual elements
var array<line> bosLines = array.new<line>()
var array<label> swingLabels = array.new<label>()

// ATR for dynamic threshold
atr = ta.atr(atrPeriod)
var float dynamicThreshold = na
dynamicThreshold := nz(atr * atrMultiplier, close * swingThreshold)

// Function to detect swing high/low using pivot points with threshold
float threshold = math.min(close * swingThreshold, dynamicThreshold)

// Major swing points with more selective detection
swingHigh = ta.pivothigh(high, lookbackLeft, lookbackRight)
swingLow = ta.pivotlow(low, lookbackLeft, lookbackRight)

// Minor swing points
minorSwingHigh = ta.pivothigh(high, minorLookbackLeft, minorLookbackRight)
minorSwingLow = ta.pivotlow(low, minorLookbackLeft, minorLookbackRight)

// Only consider swing points that exceed the dynamic threshold
validSwingHigh = not na(swingHigh) and (na(lastSwingHigh) or math.abs(swingHigh - lastSwingHigh) > threshold)
validSwingLow = not na(swingLow) and (na(lastSwingLow) or math.abs(swingLow - lastSwingLow) > threshold)

validMinorSwingHigh = not na(minorSwingHigh) and (na(lastSwingHigh) or math.abs(minorSwingHigh - lastSwingHigh) > threshold * 0.5)
validMinorSwingLow = not na(minorSwingLow) and (na(lastSwingLow) or math.abs(minorSwingLow - lastSwingLow) > threshold * 0.5)

// Detect potential reversal zones and trade signals
isSwingFailure = (validSwingHigh and high[lookbackRight] < lastSwingHigh and inUptrend) or 
                 (validSwingLow and low[lookbackRight] > lastSwingLow and inDowntrend)

isPotentialReversal = (validSwingHigh and ta.crossunder(close, ta.sma(close, 20))) or 
                     (validSwingLow and ta.crossover(close, ta.sma(close, 20)))

// Detect optimal trade entries using both major and minor swings
var bool longSignal = false
var bool shortSignal = false

// Improved entry conditions using minor swings
bool minorSwingConfirmation = (validMinorSwingHigh and minorSwingHigh < lastSwingHigh) or 
                             (validMinorSwingLow and minorSwingLow > lastSwingLow)

longSignal := (inDowntrend[1] and not inDowntrend and validSwingLow and low[lookbackRight] > lastSwingLow) or  // BOS followed by HL
              (inDowntrend and validSwingHigh and high[lookbackRight] < lastSwingHigh and close > ta.sma(close, 20)) or  // Failed LH during downtrend
              (inDowntrend and validMinorSwingLow and minorSwingLow > lastSwingLow and close > ta.sma(close, 20))  // Minor HL confirmation

shortSignal := (inUptrend[1] and not inUptrend and validSwingHigh and high[lookbackRight] < lastSwingHigh) or  // BOS followed by LH
               (inUptrend and validSwingLow and low[lookbackRight] > lastSwingLow and close < ta.sma(close, 20)) or  // Failed HL during uptrend
               (inUptrend and validMinorSwingHigh and minorSwingHigh < lastSwingHigh and close < ta.sma(close, 20))  // Minor LH confirmation

// Update swing points and plot text
if validSwingHigh
    float swingHighPrice = swingHigh
    lastSwingHigh := swingHighPrice
    
    if not na(prevSwingHigh)
        if swingHighPrice > prevSwingHigh
            label.new(bar_index[lookbackRight], swingHighPrice + (labelOffset * syminfo.mintick), text="HH", xloc=xloc.bar_index, yloc=yloc.price, color=na, textcolor=color.green, style=label.style_label_down, size=textSizeValue)
            if inDowntrend
                label.new(bar_index[lookbackRight], swingHighPrice + (3 * labelOffset * syminfo.mintick), text="BOS", xloc=xloc.bar_index, yloc=yloc.price, color=na, textcolor=color.purple, style=label.style_label_down, size=textSizeValue)
                line.new(bar_index[lookbackRight], swingHighPrice, lastSwingHighBar, prevSwingHigh, color=color.yellow, width=2)
                inDowntrend := false
                inUptrend := true
                trendBias := BULLISH
        else
            label.new(bar_index[lookbackRight], swingHighPrice + (labelOffset * syminfo.mintick), 
                     text=isSwingFailure ? "LH (Failure)" : "LH", 
                     xloc=xloc.bar_index, yloc=yloc.price, 
                     color=na, textcolor=isSwingFailure ? color.red : color.orange, 
                     style=label.style_label_down, size=textSizeValue)
            if not inDowntrend
                inDowntrend := true
                inUptrend := false
                trendBias := BEARISH
    prevSwingHigh := swingHighPrice
    lastSwingHighBar := bar_index[lookbackRight]

if validSwingLow
    float swingLowPrice = swingLow
    lastSwingLow := swingLowPrice
    
    if not na(prevSwingLow)
        if swingLowPrice < prevSwingLow
            label.new(bar_index[lookbackRight], swingLowPrice - (labelOffset * syminfo.mintick), text="LL", xloc=xloc.bar_index, yloc=yloc.price, color=na, textcolor=color.red, style=label.style_label_up, size=textSizeValue)
            if inUptrend
                label.new(bar_index[lookbackRight], swingLowPrice - (3 * labelOffset * syminfo.mintick), text="BOS", xloc=xloc.bar_index, yloc=yloc.price, color=na, textcolor=color.purple, style=label.style_label_up, size=textSizeValue)
                line.new(bar_index[lookbackRight], swingLowPrice, lastSwingLowBar, prevSwingLow, color=color.yellow, width=2)
                inUptrend := false
                inDowntrend := true
                trendBias := BEARISH
        else
            label.new(bar_index[lookbackRight], swingLowPrice - (labelOffset * syminfo.mintick), 
                     text=isSwingFailure ? "HL (Failure)" : "HL", 
                     xloc=xloc.bar_index, yloc=yloc.price, 
                     color=na, textcolor=isSwingFailure ? color.red : color.green, 
                     style=label.style_label_up, size=textSizeValue)
            if not inUptrend
                inUptrend := true
                inDowntrend := false
                trendBias := BULLISH
    prevSwingLow := swingLowPrice
    lastSwingLowBar := bar_index[lookbackRight]

// Plot trade signals with arrows (in global scope)
plotshape(longSignal, title="Long Signal", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.normal)
plotshape(shortSignal, title="Short Signal", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.normal)

// Plot minor swing confirmations (in global scope)
plotshape(minorSwingConfirmation and inUptrend, title="Minor High Confirmation", location=location.abovebar, color=color.new(color.green, 50), style=shape.circle, size=size.tiny)
plotshape(minorSwingConfirmation and inDowntrend, title="Minor Low Confirmation", location=location.belowbar, color=color.new(color.red, 50), style=shape.circle, size=size.tiny)

// Plot swing failures and potential reversals (in global scope)
plotshape(isSwingFailure, title="Swing Failure", location=location.abovebar, color=color.new(color.red, 0), style=shape.xcross, size=size.small)
plotshape(isPotentialReversal, title="Potential Reversal", location=location.belowbar, color=color.purple, style=shape.diamond, size=size.tiny)

// Plot minor swing points (only if they're significant enough)
if validMinorSwingHigh and math.abs(minorSwingHigh - lastSwingHigh) > threshold * 0.75
    float minorHighPrice = minorSwingHigh
    label.new(bar_index[minorLookbackRight], minorHighPrice + (labelOffset * syminfo.mintick), text="h", xloc=xloc.bar_index, yloc=yloc.price, color=na, textcolor=color.new(color.gray, 40), style=label.style_label_down, size=size.tiny)

if validMinorSwingLow and math.abs(minorSwingLow - lastSwingLow) > threshold * 0.75
    float minorLowPrice = minorSwingLow
    label.new(bar_index[minorLookbackRight], minorLowPrice - (labelOffset * syminfo.mintick), text="l", xloc=xloc.bar_index, yloc=yloc.price, color=na, textcolor=color.new(color.gray, 40), style=label.style_label_up, size=size.tiny) 