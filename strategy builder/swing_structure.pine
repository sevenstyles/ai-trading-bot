//@version=6
indicator("Swing Structure", overlay=true, max_labels_count=500, max_lines_count=500)

// Constants
var BULLISH = 1
var BEARISH = -1
var BULLISH_LEG = 1
var BEARISH_LEG = 0

// Variables to store previous swing levels and market structure
var float prevSwingHigh = na
var float prevSwingLow = na
var float lastSwingHigh = na
var float lastSwingLow = na
var bool inDowntrend = false
var bool inUptrend = false
var int lastSwingHighBar = na
var int lastSwingLowBar = na
var int trendBias = 0

// Input parameters with more sensitive defaults
lookbackLeft = input(5, "Lookback Left (Major Swings)")
lookbackRight = input(3, "Lookback Right (Major Swings)")
minorLookbackLeft = input(3, "Lookback Left (Minor Swings)")
minorLookbackRight = input(2, "Lookback Right (Minor Swings)")
labelOffset = input.float(0.5, "Text Offset %", minval=0.1, step=0.1) / 100
swingThreshold = input.float(0.2, "Swing Threshold %", minval=0.1, step=0.1) / 100
atrPeriod = input(10, "ATR Period")
atrMultiplier = input.float(1.0, "ATR Multiplier for Swing Significance", minval=0.5, step=0.1)
textSize = input.string("Small", "Text Size", options=["Tiny", "Small", "Normal", "Large"])

// Text size mapping
textSizeValue = switch
    textSize == "Tiny" => size.tiny
    textSize == "Small" => size.small
    textSize == "Normal" => size.normal
    => size.large

// Pre-calculate values for consistency
var float sma20 = na
sma20 := ta.sma(close, 20)
var bool crossUnderSma = false
var bool crossOverSma = false
crossUnderSma := ta.crossunder(close, sma20)
crossOverSma := ta.crossover(close, sma20)

// Calculate dynamic offset based on ATR
var float dynamicOffset = na
dynamicOffset := math.max(ta.atr(atrPeriod) * labelOffset, high - low)

// Enhanced leg detection
getLeg(int size) =>
    var leg = 0    
    newLegHigh = high[size] > ta.highest(high, size)
    newLegLow = low[size] < ta.lowest(low, size)
    
    if newLegHigh
        leg := BEARISH_LEG
    else if newLegLow
        leg := BULLISH_LEG
    leg

// Detect start of new leg
isNewLeg(int leg) => ta.change(leg) != 0
isBearishLeg(int leg) => ta.change(leg) == -1
isBullishLeg(int leg) => ta.change(leg) == 1

// More sensitive swing detection
float threshold = math.min(ta.atr(atrPeriod) * atrMultiplier, close * swingThreshold)

// Major swing points with more frequent detection
swingHigh = ta.pivothigh(high, lookbackLeft, lookbackRight)
swingLow = ta.pivotlow(low, lookbackLeft, lookbackRight)

// Minor swing points for confirmation
minorSwingHigh = ta.pivothigh(high, minorLookbackLeft, minorLookbackRight)
minorSwingLow = ta.pivotlow(low, minorLookbackLeft, minorLookbackRight)

// Enhanced validation without volume
validSwingHigh = not na(swingHigh) and (na(lastSwingHigh) or math.abs(swingHigh - lastSwingHigh) > threshold)
validSwingLow = not na(swingLow) and (na(lastSwingLow) or math.abs(swingLow - lastSwingLow) > threshold)

// More sensitive minor swing detection
validMinorSwingHigh = not na(minorSwingHigh) and (na(lastSwingHigh) or math.abs(minorSwingHigh - lastSwingHigh) > threshold * 0.5)
validMinorSwingLow = not na(minorSwingLow) and (na(lastSwingLow) or math.abs(minorSwingLow - lastSwingLow) > threshold * 0.5)

// Enhanced trend change detection
bool significantMove = math.abs(close - close[1]) > threshold

// Improved BOS detection
bool validBosUp = validSwingLow and low[lookbackRight] > lastSwingLow and significantMove
bool validBosDown = validSwingHigh and high[lookbackRight] < lastSwingHigh and significantMove

// Arrays to store all our visual elements
var array<line> bosLines = array.new<line>()
var array<label> swingLabels = array.new<label>()

// Detect potential reversal zones and trade signals
isSwingFailure = (validSwingHigh and high[lookbackRight] < lastSwingHigh and inUptrend) or 
                 (validSwingLow and low[lookbackRight] > lastSwingLow and inDowntrend)

isPotentialReversal = (validSwingHigh and crossUnderSma) or 
                     (validSwingLow and crossOverSma)

// Detect optimal trade entries using both major and minor swings
var bool longSignal = false
var bool shortSignal = false

// Improved entry conditions using minor swings
bool minorSwingConfirmation = (validMinorSwingHigh and minorSwingHigh < lastSwingHigh) or 
                             (validMinorSwingLow and minorSwingLow > lastSwingLow)

// Enhanced market structure conditions
var float lastValidBosLevel = na
var int consecutiveHigher = 0
var int consecutiveLower = 0

// Track consecutive higher highs/lows and lower highs/lows
if validSwingHigh
    if high[lookbackRight] > lastSwingHigh
        consecutiveHigher := consecutiveHigher + 1
        consecutiveLower := 0
    else if high[lookbackRight] < lastSwingHigh
        consecutiveHigher := 0
        consecutiveLower := consecutiveLower + 1

if validSwingLow
    if low[lookbackRight] > lastSwingLow
        consecutiveHigher := consecutiveHigher + 1
        consecutiveLower := 0
    else if low[lookbackRight] < lastSwingLow
        consecutiveHigher := 0
        consecutiveLower := consecutiveLower + 1

// Improved trend conditions
bool strongUptrend = consecutiveHigher >= 2 and close > sma20
bool strongDowntrend = consecutiveLower >= 2 and close < sma20

// Enhanced swing failure conditions
bool swingFailureUp = inDowntrend and validSwingHigh and high[lookbackRight] < lastSwingHigh and close > sma20 and validMinorSwingLow
bool swingFailureDown = inUptrend and validSwingLow and low[lookbackRight] > lastSwingLow and close < sma20 and validMinorSwingHigh

// Break of Structure confirmation
bool bosConfirmationUp = validBosUp and close > sma20 and validMinorSwingLow and minorSwingLow > lastSwingLow
bool bosConfirmationDown = validBosDown and close < sma20 and validMinorSwingHigh and minorSwingHigh < lastSwingHigh

// Trend continuation confirmation
bool trendContinuationUp = strongUptrend and validMinorSwingLow and minorSwingLow > lastSwingLow and close > sma20
bool trendContinuationDown = strongDowntrend and validMinorSwingHigh and minorSwingHigh < lastSwingHigh and close < sma20

// Enhanced trade signals with comprehensive conditions
longSignal := (bosConfirmationUp and not inUptrend) or (swingFailureUp and consecutiveLower >= 2) or (trendContinuationUp and not isSwingFailure)

shortSignal := (bosConfirmationDown and not inDowntrend) or (swingFailureDown and consecutiveHigher >= 2) or (trendContinuationDown and not isSwingFailure)

// Update swing points and plot text with improved BOS visualization
if validSwingHigh
    float swingHighPrice = swingHigh
    lastSwingHigh := swingHighPrice
    
    if not na(prevSwingHigh)
        currentLeg = getLeg(lookbackRight)
        if swingHighPrice > prevSwingHigh
            label.new(bar_index[lookbackRight], swingHighPrice + dynamicOffset, text="HH", xloc=xloc.bar_index, yloc=yloc.price, color=na, textcolor=color.green, style=label.style_label_down, size=textSizeValue)
            if inDowntrend
                label.new(bar_index[lookbackRight], swingHighPrice + (2 * dynamicOffset), text="BOS", xloc=xloc.bar_index, yloc=yloc.price, color=na, textcolor=color.purple, style=label.style_label_down, size=textSizeValue)
                line.new(bar_index[lookbackRight], close[lookbackRight], lastSwingHighBar, prevSwingHigh, color=color.yellow, width=2)
                inDowntrend := false
                inUptrend := true
                trendBias := BULLISH
        else
            label.new(bar_index[lookbackRight], swingHighPrice + dynamicOffset, 
                     text=isSwingFailure ? "LH (Failure)" : "LH", 
                     xloc=xloc.bar_index, yloc=yloc.price, 
                     color=na, textcolor=isSwingFailure ? color.red : color.orange, 
                     style=label.style_label_down, size=textSizeValue)
            if not inDowntrend
                inDowntrend := true
                inUptrend := false
                trendBias := BEARISH
    prevSwingHigh := swingHighPrice
    lastSwingHighBar := bar_index[lookbackRight]

if validSwingLow
    float swingLowPrice = swingLow
    lastSwingLow := swingLowPrice
    
    if not na(prevSwingLow)
        currentLeg = getLeg(lookbackRight)
        if swingLowPrice < prevSwingLow
            label.new(bar_index[lookbackRight], swingLowPrice - dynamicOffset, text="LL", xloc=xloc.bar_index, yloc=yloc.price, color=na, textcolor=color.red, style=label.style_label_up, size=textSizeValue)
            if inUptrend
                label.new(bar_index[lookbackRight], swingLowPrice - (2 * dynamicOffset), text="BOS", xloc=xloc.bar_index, yloc=yloc.price, color=na, textcolor=color.purple, style=label.style_label_up, size=textSizeValue)
                line.new(bar_index[lookbackRight], close[lookbackRight], lastSwingLowBar, prevSwingLow, color=color.yellow, width=2)
                inUptrend := false
                inDowntrend := true
                trendBias := BEARISH
        else
            label.new(bar_index[lookbackRight], swingLowPrice - dynamicOffset, 
                     text=isSwingFailure ? "HL (Failure)" : "HL", 
                     xloc=xloc.bar_index, yloc=yloc.price, 
                     color=na, textcolor=isSwingFailure ? color.red : color.green, 
                     style=label.style_label_up, size=textSizeValue)
            if not inUptrend
                inUptrend := true
                inDowntrend := false
                trendBias := BULLISH
    prevSwingLow := swingLowPrice
    lastSwingLowBar := bar_index[lookbackRight]

// Plot trade signals with arrows (in global scope)
plotshape(longSignal, title="Long Signal", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.normal)
plotshape(shortSignal, title="Short Signal", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.normal)

// Plot swing failures and potential reversals (in global scope)
plotshape(isSwingFailure, title="Swing Failure", location=location.abovebar, color=color.new(color.red, 0), style=shape.xcross, size=size.small)
plotshape(isPotentialReversal, title="Potential Reversal", location=location.belowbar, color=color.purple, style=shape.diamond, size=size.tiny)

// Plot minor swing points (only if they're significant enough)
if validMinorSwingHigh and math.abs(minorSwingHigh - lastSwingHigh) > threshold * 0.75
    float minorHighPrice = minorSwingHigh
    label.new(bar_index[minorLookbackRight], minorHighPrice + (dynamicOffset * 0.5), text="h", xloc=xloc.bar_index, yloc=yloc.price, color=na, textcolor=color.new(color.gray, 40), style=label.style_label_down, size=size.tiny)

if validMinorSwingLow and math.abs(minorSwingLow - lastSwingLow) > threshold * 0.75
    float minorLowPrice = minorSwingLow
    label.new(bar_index[minorLookbackRight], minorLowPrice - (dynamicOffset * 0.5), text="l", xloc=xloc.bar_index, yloc=yloc.price, color=na, textcolor=color.new(color.gray, 40), style=label.style_label_up, size=size.tiny)

// Enhance potential reversal detection with direction
isPotentialBullishReversal = validSwingLow and crossOverSma and validMinorSwingLow and minorSwingLow > lastSwingLow
isPotentialBearishReversal = validSwingHigh and crossUnderSma and validMinorSwingHigh and minorSwingHigh < lastSwingHigh

// Use minor swings to confirm reversals
bool minorSwingConfirmsBullish = validMinorSwingLow and minorSwingLow > lastSwingLow and close > sma20
bool minorSwingConfirmsBearish = validMinorSwingHigh and minorSwingHigh < lastSwingHigh and close < sma20

// Enhanced trade signals with minor swing confirmation
longSignal := (bosConfirmationUp and not inUptrend and minorSwingConfirmsBullish) or 
              (swingFailureUp and consecutiveLower >= 2 and minorSwingConfirmsBullish) or 
              (trendContinuationUp and not isSwingFailure and minorSwingConfirmsBullish)

shortSignal := (bosConfirmationDown and not inDowntrend and minorSwingConfirmsBearish) or 
               (swingFailureDown and consecutiveHigher >= 2 and minorSwingConfirmsBearish) or 
               (trendContinuationDown and not isSwingFailure and minorSwingConfirmsBearish)

// Plot differentiated reversal signals
plotshape(isPotentialBullishReversal, title="Bullish Reversal", location=location.belowbar, color=color.new(color.green, 20), style=shape.diamond, size=size.tiny)
plotshape(isPotentialBearishReversal, title="Bearish Reversal", location=location.abovebar, color=color.new(color.red, 20), style=shape.diamond, size=size.tiny) 