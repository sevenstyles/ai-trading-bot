// Â© Sevenstyles

//@version=5
indicator(title="Fair Value Gaps", shorttitle="FVG", overlay=true, max_boxes_count = 200)

// Input parameters
ext = input.int(10, "Extend FVGs")

// Color Settings
upcolor = input.color(defval = color.new(color.green, 77), title = "Bullish color", group = "Aesthetics")
downcolor = input.color(defval = color.new(color.red, 77), title = "Bearish color", group = "Aesthetics")
consecutive_upcolor = input.color(defval = color.new(color.blue, 77), title = "Consecutive Bullish color", group = "Aesthetics")
consecutive_downcolor = input.color(defval = color.new(color.purple, 77), title = "Consecutive Bearish color", group = "Aesthetics")

// Swing Point Settings
swing_lookback = input.int(10, "Swing Point Lookback Period", minval=3, maxval=50, group="Swing Point Settings", tooltip="Number of bars to look back for finding swing points")

// Consecutive FVG Settings
use_consecutive = input.bool(true, "Filter for Consecutive FVGs", group="Consecutive FVG Filter")
required_consecutive = input.int(2, "Required Consecutive FVGs", minval=2, maxval=5, group="Consecutive FVG Filter", tooltip="Only show FVGs when this many consecutive FVGs of the same type (bullish/bearish) have occurred")
highlight_consecutive = input.bool(true, "Highlight Consecutive FVGs", group="Consecutive FVG Filter")

// Candle Color Filter
use_candle_color_filter = input.bool(true, "Filter by Candle Color", group="Candle Color Filter", tooltip="Only show FVGs when all three candles are the same color")

// Arrays to store boxes and their levels
var box[] bullishBoxes = array.new_box()
var float[] bullishTops = array.new_float()
var float[] bullishBottoms = array.new_float()
var box[] bearishBoxes = array.new_box()
var float[] bearishTops = array.new_float()
var float[] bearishBottoms = array.new_float()

// Arrays to store swing labels
var label[] bullishLabels = array.new_label()
var label[] bearishLabels = array.new_label()

// Variables to track consecutive FVGs
var int bullishConsecutive = 0
var int bearishConsecutive = 0
var bool lastWasBullish = false
var bool lastWasBearish = false
var bool bfvg = false
var bool sfvg = false
var bool canPlotFVG = false

// Function to check if candle is bullish/bearish
is_bullish_candle(idx) => close[idx] > open[idx]
is_bearish_candle(idx) => close[idx] < open[idx]

// Function to check if three candles are same color
are_three_candles_bullish(idx) =>
    is_bullish_candle(idx) and is_bullish_candle(idx+1) and is_bullish_candle(idx+2)

are_three_candles_bearish(idx) =>
    is_bearish_candle(idx) and is_bearish_candle(idx+1) and is_bearish_candle(idx+2)

// FVG Detection with filters
// Only check for FVG after the current candle has closed
if barstate.isconfirmed
    // Check for bullish FVG
    if low[1] > high[3]  // Check the gap
        if not use_candle_color_filter or are_three_candles_bullish(1)  // Check candle colors if filter is enabled
            bfvg := true
            canPlotFVG := true
        else
            bfvg := false
    else
        bfvg := false
    
    // Check for bearish FVG
    if high[1] < low[3]  // Check the gap
        if not use_candle_color_filter or are_three_candles_bearish(1)  // Check candle colors if filter is enabled
            sfvg := true
            canPlotFVG := true
        else
            sfvg := false
    else
        sfvg := false
else
    bfvg := false
    sfvg := false
    canPlotFVG := false

// Update consecutive counters with type checking
if bfvg and lastWasBullish
    bullishConsecutive := bullishConsecutive + 1
else if bfvg
    bullishConsecutive := 1
else
    bullishConsecutive := 0

if sfvg and lastWasBearish
    bearishConsecutive := bearishConsecutive + 1
else if sfvg
    bearishConsecutive := 1
else
    bearishConsecutive := 0

// Update last FVG type
lastWasBullish := bfvg
lastWasBearish := sfvg

// Function to find previous swing high/low
find_swing_point(is_high) =>
    float result = is_high ? high[1] : low[1]
    int point_index = 1
    
    for i = 2 to swing_lookback  // Use the user-defined lookback period
        float curr_value = is_high ? high[i] : low[i]
        if is_high ? (curr_value > result) : (curr_value < result)
            result := curr_value
            point_index := i
    [result, point_index]

// Create new FVG boxes only when candle has closed
if canPlotFVG
    if bfvg and (not use_consecutive or bullishConsecutive >= required_consecutive)
        float fvg_top = low[1]
        float fvg_bottom = high[3]
        
        color boxColor = highlight_consecutive and bullishConsecutive >= required_consecutive ? consecutive_upcolor : upcolor
        box newBox = box.new(left=bar_index-3, top=fvg_top, right=bar_index+ext, bottom=fvg_bottom,
             border_color=color.new(color.gray, 100), bgcolor=boxColor)
        array.push(bullishBoxes, newBox)
        array.push(bullishTops, fvg_top)
        array.push(bullishBottoms, fvg_bottom)
        
        // Add PL label
        [swing_low, low_index] = find_swing_point(false)
        label newLabel = label.new(bar_index-low_index, swing_low, text="PL",
             color=color.new(color.green, 80), textcolor=color.green,
             style=label.style_label_up)
        array.push(bullishLabels, newLabel)

    if sfvg and (not use_consecutive or bearishConsecutive >= required_consecutive)
        float fvg_top = high[1]
        float fvg_bottom = low[3]
        
        color boxColor = highlight_consecutive and bearishConsecutive >= required_consecutive ? consecutive_downcolor : downcolor
        box newBox = box.new(left=bar_index-3, top=fvg_top, right=bar_index+ext, bottom=fvg_bottom,
             border_color=color.new(color.gray, 100), bgcolor=boxColor)
        array.push(bearishBoxes, newBox)
        array.push(bearishTops, fvg_top)
        array.push(bearishBottoms, fvg_bottom)
        
        // Add PH label
        [swing_high, high_index] = find_swing_point(true)
        label newLabel = label.new(bar_index-high_index, swing_high, text="PH",
             color=color.new(color.red, 80), textcolor=color.red,
             style=label.style_label_down)
        array.push(bearishLabels, newLabel)

// Check for invalidation and remove boxes
if array.size(bullishBoxes) > 0
    for i = array.size(bullishBoxes) - 1 to 0
        box currentBox = array.get(bullishBoxes, i)
        float top = array.get(bullishTops, i)
        float bottom = array.get(bullishBottoms, i)
        label currentLabel = array.get(bullishLabels, i)
        
        // For bullish FVGs, remove only when a candle CLOSES below the bottom of the FVG zone
        // We use 'close' price to ensure it's the candle's closing price, not just a wick
        if close < bottom  // Candle must close below the bottom of bullish FVG to invalidate it
            box.delete(currentBox)
            label.delete(currentLabel)
            array.remove(bullishBoxes, i)
            array.remove(bullishTops, i)
            array.remove(bullishBottoms, i)
            array.remove(bullishLabels, i)
        else
            box.set_right(currentBox, bar_index + ext)

if array.size(bearishBoxes) > 0
    for i = array.size(bearishBoxes) - 1 to 0
        box currentBox = array.get(bearishBoxes, i)
        float top = array.get(bearishTops, i)
        float bottom = array.get(bearishBottoms, i)
        label currentLabel = array.get(bearishLabels, i)
        
        // For bearish FVGs, remove only when a candle CLOSES above the top of the FVG zone
        // We use 'close' price to ensure it's the candle's closing price, not just a wick
        if close > top  // Candle must close above the top of bearish FVG to invalidate it
            box.delete(currentBox)
            label.delete(currentLabel)
            array.remove(bearishBoxes, i)
            array.remove(bearishTops, i)
            array.remove(bearishBottoms, i)
            array.remove(bearishLabels, i)
        else
            box.set_right(currentBox, bar_index + ext)