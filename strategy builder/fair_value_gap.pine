// Â© Sevenstyles

//@version=5
indicator(title="Fair Value Gaps", shorttitle="FVG", overlay=true, max_boxes_count = 200)

// Input parameters
ext = input.int(10, "Extend FVGs")
upcolor = input.color(defval = color.green, title = "Bullish color", group = "Aesthetics")
downcolor = input.color(defval = color.red, title = "Bearish color", group = "Aesthetics")

// Volume Spike Settings
n_times = input.float(2.0, "Volume must be N times bigger", minval=1.0, step=0.1, group="Volume Spike Filter")
bars_back = input.int(10, "Than average volume in last X bars", minval=1, group="Volume Spike Filter")
ma_type = input.string("SMA", "Moving Average Type", options=["SMA", "WMA", "EMA"], group="Volume Spike Filter")
use_vol_spike = input.bool(true, "Use Volume Spike Filter", group="Volume Spike Filter")

// Other Filters
inp2 = input.bool(false, "ATR Filter", group = "Filters")
inp3 = input.bool(false, "Trend Filter", group = "Filters")

// Arrays to store boxes and their levels
var box[] bullishBoxes = array.new_box()
var float[] bullishLevels = array.new_float()
var box[] bearishBoxes = array.new_box()
var float[] bearishLevels = array.new_float()

// Volume spike detection using MA comparison
ma_func(x, length) =>
    switch ma_type
        "WMA" => ta.wma(x, length)
        "EMA" => ta.ema(x, length)
        => ta.sma(x, length)

vol_ma = ma_func(volume[1], bars_back)
is_vol_spike = volume > vol_ma * n_times
vol_filt = use_vol_spike ? is_vol_spike[2] : true  // Check volume spike on the FVG candle

// Other filters calculation
atr = ta.atr(20) / 1.5
atrfilt = inp2 ? ((low - high[2] > atr) or (low[2] - high > atr)) : true
loc = ta.sma(close, 54)
loc2 = loc > loc[1]
locfiltb = inp3 ? loc2 : true
locfilts = inp3 ? not loc2 : true

// FVG Detection with volume spike filter
bfvg = low > high[2] and vol_filt and atrfilt and locfiltb
sfvg = high < low[2] and vol_filt and atrfilt and locfilts

// Create new FVG boxes
if bfvg
    box newBox = box.new(left = bar_index-2, top = low, right = bar_index + ext, bottom = high[2], 
         border_color = color.new(color.gray, 100), bgcolor = color.new(upcolor, 85))
    array.push(bullishBoxes, newBox)
    array.push(bullishLevels, high[2])  // Store the bottom level of bullish FVG

if sfvg
    box newBox = box.new(left = bar_index-2, top = high, right = bar_index + ext, bottom = low[2], 
         border_color = color.new(color.gray, 100), bgcolor = color.new(downcolor, 85))
    array.push(bearishBoxes, newBox)
    array.push(bearishLevels, low[2])  // Store the top level of bearish FVG

// Check for invalidation and remove boxes
if array.size(bullishBoxes) > 0
    for i = array.size(bullishBoxes) - 1 to 0
        box currentBox = array.get(bullishBoxes, i)
        float level = array.get(bullishLevels, i)
        if close < level  // Price closed below the FVG
            box.delete(currentBox)
            array.remove(bullishBoxes, i)
            array.remove(bullishLevels, i)
        else
            box.set_right(currentBox, bar_index + ext)  // Extend active boxes

if array.size(bearishBoxes) > 0
    for i = array.size(bearishBoxes) - 1 to 0
        box currentBox = array.get(bearishBoxes, i)
        float level = array.get(bearishLevels, i)
        if close > level  // Price closed above the FVG
            box.delete(currentBox)
            array.remove(bearishBoxes, i)
            array.remove(bearishLevels, i)
        else
            box.set_right(currentBox, bar_index + ext)  // Extend active boxes