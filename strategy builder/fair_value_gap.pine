// Â© Sevenstyles

//@version=5
indicator(title="Fair Value Gaps", shorttitle="FVG", overlay=true, max_boxes_count = 200)

// Input parameters
ext = input.int(10, "Extend FVGs")
upcolor = input.color(defval = color.green, title = "Bullish color", group = "Aesthetics")
downcolor = input.color(defval = color.red, title = "Bearish color", group = "Aesthetics")
consecutive_upcolor = input.color(defval = color.new(color.blue, 15), title = "Consecutive Bullish color", group = "Aesthetics")
consecutive_downcolor = input.color(defval = color.new(color.purple, 15), title = "Consecutive Bearish color", group = "Aesthetics")

// Label Settings
show_labels = input.bool(true, "Show Long/Short Labels", group="Label Settings")
label_size = input.string("small", "Label Size", options=["tiny", "small", "normal", "large"], group="Label Settings")
label_offset = input.int(1, "Label Offset (bars)", minval=1, group="Label Settings")

// FVG Size Filter
use_size_filter = input.bool(true, "Filter by FVG Size", group="Size Filter")
max_fvg_size = input.float(5.0, "Maximum FVG Size % of Candle", minval=0.1, step=0.1, group="Size Filter", tooltip="Only show FVGs where the gap height is less than this percentage of the candle height")

// Consecutive FVG Settings
use_consecutive = input.bool(true, "Filter for Consecutive FVGs", group="Consecutive FVG Filter")
required_consecutive = input.int(2, "Required Consecutive FVGs", minval=2, maxval=5, group="Consecutive FVG Filter", tooltip="Only show FVGs when this many consecutive FVGs of the same type (bullish/bearish) have occurred")
highlight_consecutive = input.bool(true, "Highlight Consecutive FVGs", group="Consecutive FVG Filter")

// Volume Spike Settings
n_times = input.float(2.0, "Volume must be N times bigger", minval=1.0, step=0.1, group="Volume Spike Filter")
bars_back = input.int(10, "Than average volume in last X bars", minval=1, group="Volume Spike Filter")
ma_type = input.string("SMA", "Moving Average Type", options=["SMA", "WMA", "EMA"], group="Volume Spike Filter")
use_vol_spike = input.bool(true, "Use Volume Spike Filter", group="Volume Spike Filter")

// Other Filters
inp2 = input.bool(false, "ATR Filter", group = "Filters")
inp3 = input.bool(false, "Trend Filter", group = "Filters")

// Arrays to store boxes and their levels
var box[] bullishBoxes = array.new_box()
var float[] bullishLevels = array.new_float()
var box[] bearishBoxes = array.new_box()
var float[] bearishLevels = array.new_float()

// Variables to track consecutive FVGs
var int bullishConsecutive = 0
var int bearishConsecutive = 0
var bool lastWasBullish = false
var bool lastWasBearish = false

// Function to get label style based on input
get_label_style(size) =>
    switch size
        "tiny" => size.tiny
        "small" => size.small
        "large" => size.large
        => size.normal

// Volume spike detection using MA comparison
ma_func(x, length) =>
    switch ma_type
        "WMA" => ta.wma(x, length)
        "EMA" => ta.ema(x, length)
        => ta.sma(x, length)

vol_ma = ma_func(volume[1], bars_back)
is_vol_spike = volume > vol_ma * n_times
vol_filt = use_vol_spike ? is_vol_spike[2] : true  // Check volume spike on the FVG candle

// Other filters calculation
atr = ta.atr(20) / 1.5
atrfilt = inp2 ? ((low - high[2] > atr) or (low[2] - high > atr)) : true
loc = ta.sma(close, 54)
loc2 = loc > loc[1]
locfiltb = inp3 ? loc2 : true
locfilts = inp3 ? not loc2 : true

// Size filter calculation
check_fvg_size(fvg_height, candle_height) =>
    percentage = math.abs(fvg_height / candle_height) * 100
    not use_size_filter or percentage <= max_fvg_size

// FVG Detection with all filters
bfvg = low > high[2] and vol_filt and atrfilt and locfiltb
sfvg = high < low[2] and vol_filt and atrfilt and locfilts

// Update consecutive counters with type checking
if bfvg and lastWasBullish
    bullishConsecutive := bullishConsecutive + 1
else if bfvg
    bullishConsecutive := 1
else
    bullishConsecutive := 0

if sfvg and lastWasBearish
    bearishConsecutive := bearishConsecutive + 1
else if sfvg
    bearishConsecutive := 1
else
    bearishConsecutive := 0

// Update last FVG type
lastWasBullish := bfvg
lastWasBearish := sfvg

// Create new FVG boxes with size filter and labels
if bfvg and (not use_consecutive or bullishConsecutive >= required_consecutive)
    fvg_height = low - high[2]  // Gap height
    candle_height = high[2] - low[2]  // FVG candle height
    if check_fvg_size(fvg_height, candle_height)
        color boxColor = highlight_consecutive and bullishConsecutive >= required_consecutive ? consecutive_upcolor : upcolor
        box newBox = box.new(left = bar_index-2, top = low, right = bar_index + ext, bottom = high[2], 
             border_color = color.new(color.gray, 100), bgcolor = boxColor)
        array.push(bullishBoxes, newBox)
        array.push(bullishLevels, high[2])  // Store the bottom level of bullish FVG
        
        // Add LONG label for consecutive bullish FVGs
        if show_labels and bullishConsecutive >= required_consecutive
            label.new(bar_index + label_offset, high, text="LONG", 
                 color=color.new(color.green, 20), 
                 textcolor=color.white,
                 style=label.style_label_down,
                 size=get_label_style(label_size))

if sfvg and (not use_consecutive or bearishConsecutive >= required_consecutive)
    fvg_height = low[2] - high  // Gap height
    candle_height = high[2] - low[2]  // FVG candle height
    if check_fvg_size(fvg_height, candle_height)
        color boxColor = highlight_consecutive and bearishConsecutive >= required_consecutive ? consecutive_downcolor : downcolor
        box newBox = box.new(left = bar_index-2, top = high, right = bar_index + ext, bottom = low[2], 
             border_color = color.new(color.gray, 100), bgcolor = boxColor)
        array.push(bearishBoxes, newBox)
        array.push(bearishLevels, low[2])  // Store the top level of bearish FVG
        
        // Add SHORT label for consecutive bearish FVGs
        if show_labels and bearishConsecutive >= required_consecutive
            label.new(bar_index + label_offset, low, text="SHORT", 
                 color=color.new(color.red, 20), 
                 textcolor=color.white,
                 style=label.style_label_up,
                 size=get_label_style(label_size))

// Check for invalidation and remove boxes
if array.size(bullishBoxes) > 0
    for i = array.size(bullishBoxes) - 1 to 0
        box currentBox = array.get(bullishBoxes, i)
        float level = array.get(bullishLevels, i)
        if close < level  // Price closed below the FVG
            box.delete(currentBox)
            array.remove(bullishBoxes, i)
            array.remove(bullishLevels, i)
        else
            box.set_right(currentBox, bar_index + ext)  // Extend active boxes

if array.size(bearishBoxes) > 0
    for i = array.size(bearishBoxes) - 1 to 0
        box currentBox = array.get(bearishBoxes, i)
        float level = array.get(bearishLevels, i)
        if close > level  // Price closed above the FVG
            box.delete(currentBox)
            array.remove(bearishBoxes, i)
            array.remove(bearishLevels, i)
        else
            box.set_right(currentBox, bar_index + ext)  // Extend active boxes